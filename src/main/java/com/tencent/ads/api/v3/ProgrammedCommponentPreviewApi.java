/*
 * Marketing API
 * Marketing API
 *
 * OpenAPI spec version: 3.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.tencent.ads.api.v3;

import com.google.gson.reflect.TypeToken;
import com.tencent.ads.ApiCallback;
import com.tencent.ads.ApiClient;
import com.tencent.ads.ApiException;
import com.tencent.ads.ApiResponse;
import com.tencent.ads.Configuration;
import com.tencent.ads.Pair;
import com.tencent.ads.ProgressRequestBody;
import com.tencent.ads.ProgressResponseBody;
import com.tencent.ads.model.v3.ProgrammedCommponentPreviewAddRequest;
import com.tencent.ads.model.v3.ProgrammedCommponentPreviewAddResponse;
import com.tencent.ads.model.v3.ProgrammedCommponentPreviewDeleteRequest;
import com.tencent.ads.model.v3.ProgrammedCommponentPreviewDeleteResponse;
import com.tencent.ads.model.v3.ProgrammedCommponentPreviewGetResponse;
import com.tencent.ads.model.v3.ProgrammedCommponentPreviewUpdateRequest;
import com.tencent.ads.model.v3.ProgrammedCommponentPreviewUpdateResponse;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProgrammedCommponentPreviewApi {
  private ApiClient apiClient;

  public ProgrammedCommponentPreviewApi() {
    this(Configuration.getV3DefaultApiClient());
  }

  public ProgrammedCommponentPreviewApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Build call for programmedCommponentPreviewAdd
   *
   * @param data (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call programmedCommponentPreviewAddCall(
      ProgrammedCommponentPreviewAddRequest data,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener,
      Pair... headerPair)
      throws ApiException {

    Object localVarPostBody = data;

    // create path and map variables
    String localVarPath = "/programmed_commponent_preview/add";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json", "application/xml"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (headerPair != null && headerPair.length > 0) {
      for (int i = 0; i < headerPair.length; i++) {
        localVarHeaderParams.put(headerPair[i].getName(), headerPair[i].getValue());
      }
    }

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(
                    com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {"accessToken", "nonce", "timestamp"};
    return apiClient.buildCall(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call programmedCommponentPreviewAddValidateBeforeCall(
      ProgrammedCommponentPreviewAddRequest data,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener,
      Pair... headerPair)
      throws ApiException {

    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(
          "Missing the required parameter 'data' when calling programmedCommponentPreviewAdd(Async)");
    }

    com.squareup.okhttp.Call call =
        programmedCommponentPreviewAddCall(
            data, progressListener, progressRequestListener, headerPair);
    return call;
  }

  /**
   * 组件化创意衍生预览创建接口
   *
   * @param data (required)
   * @return ProgrammedCommponentPreviewAddResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ProgrammedCommponentPreviewAddResponse programmedCommponentPreviewAdd(
      ProgrammedCommponentPreviewAddRequest data, Pair... headerPair) throws ApiException {
    ApiResponse<ProgrammedCommponentPreviewAddResponse> resp =
        programmedCommponentPreviewAddWithHttpInfo(data, headerPair);
    return resp.getData();
  }

  /**
   * 组件化创意衍生预览创建接口
   *
   * @param data (required)
   * @return ApiResponse&lt;ProgrammedCommponentPreviewAddResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<ProgrammedCommponentPreviewAddResponse>
      programmedCommponentPreviewAddWithHttpInfo(
          ProgrammedCommponentPreviewAddRequest data, Pair... headerPair) throws ApiException {
    com.squareup.okhttp.Call call =
        programmedCommponentPreviewAddValidateBeforeCall(data, null, null, headerPair);
    Type localVarReturnType = new TypeToken<ProgrammedCommponentPreviewAddResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * 组件化创意衍生预览创建接口 (asynchronously)
   *
   * @param data (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call programmedCommponentPreviewAddAsync(
      ProgrammedCommponentPreviewAddRequest data,
      final ApiCallback<ProgrammedCommponentPreviewAddResponse> callback,
      Pair... headerPair)
      throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        programmedCommponentPreviewAddValidateBeforeCall(
            data, progressListener, progressRequestListener, headerPair);
    Type localVarReturnType = new TypeToken<ProgrammedCommponentPreviewAddResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for programmedCommponentPreviewDelete
   *
   * @param data (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call programmedCommponentPreviewDeleteCall(
      ProgrammedCommponentPreviewDeleteRequest data,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener,
      Pair... headerPair)
      throws ApiException {

    Object localVarPostBody = data;

    // create path and map variables
    String localVarPath = "/programmed_commponent_preview/delete";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json", "application/xml"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (headerPair != null && headerPair.length > 0) {
      for (int i = 0; i < headerPair.length; i++) {
        localVarHeaderParams.put(headerPair[i].getName(), headerPair[i].getValue());
      }
    }

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(
                    com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {"accessToken", "nonce", "timestamp"};
    return apiClient.buildCall(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call programmedCommponentPreviewDeleteValidateBeforeCall(
      ProgrammedCommponentPreviewDeleteRequest data,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener,
      Pair... headerPair)
      throws ApiException {

    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(
          "Missing the required parameter 'data' when calling programmedCommponentPreviewDelete(Async)");
    }

    com.squareup.okhttp.Call call =
        programmedCommponentPreviewDeleteCall(
            data, progressListener, progressRequestListener, headerPair);
    return call;
  }

  /**
   * 组件化创意衍生预览删除接口
   *
   * @param data (required)
   * @return ProgrammedCommponentPreviewDeleteResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ProgrammedCommponentPreviewDeleteResponse programmedCommponentPreviewDelete(
      ProgrammedCommponentPreviewDeleteRequest data, Pair... headerPair) throws ApiException {
    ApiResponse<ProgrammedCommponentPreviewDeleteResponse> resp =
        programmedCommponentPreviewDeleteWithHttpInfo(data, headerPair);
    return resp.getData();
  }

  /**
   * 组件化创意衍生预览删除接口
   *
   * @param data (required)
   * @return ApiResponse&lt;ProgrammedCommponentPreviewDeleteResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<ProgrammedCommponentPreviewDeleteResponse>
      programmedCommponentPreviewDeleteWithHttpInfo(
          ProgrammedCommponentPreviewDeleteRequest data, Pair... headerPair) throws ApiException {
    com.squareup.okhttp.Call call =
        programmedCommponentPreviewDeleteValidateBeforeCall(data, null, null, headerPair);
    Type localVarReturnType =
        new TypeToken<ProgrammedCommponentPreviewDeleteResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * 组件化创意衍生预览删除接口 (asynchronously)
   *
   * @param data (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call programmedCommponentPreviewDeleteAsync(
      ProgrammedCommponentPreviewDeleteRequest data,
      final ApiCallback<ProgrammedCommponentPreviewDeleteResponse> callback,
      Pair... headerPair)
      throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        programmedCommponentPreviewDeleteValidateBeforeCall(
            data, progressListener, progressRequestListener, headerPair);
    Type localVarReturnType =
        new TypeToken<ProgrammedCommponentPreviewDeleteResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for programmedCommponentPreviewGet
   *
   * @param accountId (required)
   * @param materialDeriveId (required)
   * @param fields 返回参数的字段列表 (optional)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call programmedCommponentPreviewGetCall(
      Long accountId,
      Long materialDeriveId,
      List<String> fields,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener,
      Pair... headerPair)
      throws ApiException {

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/programmed_commponent_preview/get";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    if (accountId != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("account_id", accountId));
    if (materialDeriveId != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("material_derive_id", materialDeriveId));
    if (fields != null)
      localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "fields", fields));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"text/plain"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (headerPair != null && headerPair.length > 0) {
      for (int i = 0; i < headerPair.length; i++) {
        localVarHeaderParams.put(headerPair[i].getName(), headerPair[i].getValue());
      }
    }

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(
                    com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {"accessToken", "nonce", "timestamp"};
    return apiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call programmedCommponentPreviewGetValidateBeforeCall(
      Long accountId,
      Long materialDeriveId,
      List<String> fields,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener,
      Pair... headerPair)
      throws ApiException {

    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      throw new ApiException(
          "Missing the required parameter 'accountId' when calling programmedCommponentPreviewGet(Async)");
    }

    // verify the required parameter 'materialDeriveId' is set
    if (materialDeriveId == null) {
      throw new ApiException(
          "Missing the required parameter 'materialDeriveId' when calling programmedCommponentPreviewGet(Async)");
    }

    com.squareup.okhttp.Call call =
        programmedCommponentPreviewGetCall(
            accountId,
            materialDeriveId,
            fields,
            progressListener,
            progressRequestListener,
            headerPair);
    return call;
  }

  /**
   * 组件化创意衍生预览查询接口
   *
   * @param accountId (required)
   * @param materialDeriveId (required)
   * @param fields 返回参数的字段列表 (optional)
   * @return ProgrammedCommponentPreviewGetResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ProgrammedCommponentPreviewGetResponse programmedCommponentPreviewGet(
      Long accountId, Long materialDeriveId, List<String> fields, Pair... headerPair)
      throws ApiException {
    ApiResponse<ProgrammedCommponentPreviewGetResponse> resp =
        programmedCommponentPreviewGetWithHttpInfo(accountId, materialDeriveId, fields, headerPair);
    return resp.getData();
  }

  /**
   * 组件化创意衍生预览查询接口
   *
   * @param accountId (required)
   * @param materialDeriveId (required)
   * @param fields 返回参数的字段列表 (optional)
   * @return ApiResponse&lt;ProgrammedCommponentPreviewGetResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<ProgrammedCommponentPreviewGetResponse>
      programmedCommponentPreviewGetWithHttpInfo(
          Long accountId, Long materialDeriveId, List<String> fields, Pair... headerPair)
          throws ApiException {
    com.squareup.okhttp.Call call =
        programmedCommponentPreviewGetValidateBeforeCall(
            accountId, materialDeriveId, fields, null, null, headerPair);
    Type localVarReturnType = new TypeToken<ProgrammedCommponentPreviewGetResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * 组件化创意衍生预览查询接口 (asynchronously)
   *
   * @param accountId (required)
   * @param materialDeriveId (required)
   * @param fields 返回参数的字段列表 (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call programmedCommponentPreviewGetAsync(
      Long accountId,
      Long materialDeriveId,
      List<String> fields,
      final ApiCallback<ProgrammedCommponentPreviewGetResponse> callback,
      Pair... headerPair)
      throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        programmedCommponentPreviewGetValidateBeforeCall(
            accountId,
            materialDeriveId,
            fields,
            progressListener,
            progressRequestListener,
            headerPair);
    Type localVarReturnType = new TypeToken<ProgrammedCommponentPreviewGetResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for programmedCommponentPreviewUpdate
   *
   * @param data (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call programmedCommponentPreviewUpdateCall(
      ProgrammedCommponentPreviewUpdateRequest data,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener,
      Pair... headerPair)
      throws ApiException {

    Object localVarPostBody = data;

    // create path and map variables
    String localVarPath = "/programmed_commponent_preview/update";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json", "application/xml"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (headerPair != null && headerPair.length > 0) {
      for (int i = 0; i < headerPair.length; i++) {
        localVarHeaderParams.put(headerPair[i].getName(), headerPair[i].getValue());
      }
    }

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(
                    com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {"accessToken", "nonce", "timestamp"};
    return apiClient.buildCall(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call programmedCommponentPreviewUpdateValidateBeforeCall(
      ProgrammedCommponentPreviewUpdateRequest data,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener,
      Pair... headerPair)
      throws ApiException {

    // verify the required parameter 'data' is set
    if (data == null) {
      throw new ApiException(
          "Missing the required parameter 'data' when calling programmedCommponentPreviewUpdate(Async)");
    }

    com.squareup.okhttp.Call call =
        programmedCommponentPreviewUpdateCall(
            data, progressListener, progressRequestListener, headerPair);
    return call;
  }

  /**
   * 组件化创意衍生预览更新接口
   *
   * @param data (required)
   * @return ProgrammedCommponentPreviewUpdateResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ProgrammedCommponentPreviewUpdateResponse programmedCommponentPreviewUpdate(
      ProgrammedCommponentPreviewUpdateRequest data, Pair... headerPair) throws ApiException {
    ApiResponse<ProgrammedCommponentPreviewUpdateResponse> resp =
        programmedCommponentPreviewUpdateWithHttpInfo(data, headerPair);
    return resp.getData();
  }

  /**
   * 组件化创意衍生预览更新接口
   *
   * @param data (required)
   * @return ApiResponse&lt;ProgrammedCommponentPreviewUpdateResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<ProgrammedCommponentPreviewUpdateResponse>
      programmedCommponentPreviewUpdateWithHttpInfo(
          ProgrammedCommponentPreviewUpdateRequest data, Pair... headerPair) throws ApiException {
    com.squareup.okhttp.Call call =
        programmedCommponentPreviewUpdateValidateBeforeCall(data, null, null, headerPair);
    Type localVarReturnType =
        new TypeToken<ProgrammedCommponentPreviewUpdateResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * 组件化创意衍生预览更新接口 (asynchronously)
   *
   * @param data (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call programmedCommponentPreviewUpdateAsync(
      ProgrammedCommponentPreviewUpdateRequest data,
      final ApiCallback<ProgrammedCommponentPreviewUpdateResponse> callback,
      Pair... headerPair)
      throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        programmedCommponentPreviewUpdateValidateBeforeCall(
            data, progressListener, progressRequestListener, headerPair);
    Type localVarReturnType =
        new TypeToken<ProgrammedCommponentPreviewUpdateResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
}
