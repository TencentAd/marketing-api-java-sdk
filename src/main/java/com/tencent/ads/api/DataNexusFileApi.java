/*
 * Marketing API
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.tencent.ads.api;

import com.google.gson.reflect.TypeToken;
import com.tencent.ads.ApiCallback;
import com.tencent.ads.ApiClient;
import com.tencent.ads.ApiException;
import com.tencent.ads.ApiResponse;
import com.tencent.ads.Configuration;
import com.tencent.ads.Pair;
import com.tencent.ads.ProgressRequestBody;
import com.tencent.ads.ProgressResponseBody;
import com.tencent.ads.model.DataNexusFileAddResponse;
import com.tencent.ads.model.DataNexusFileGetResponse;
import com.tencent.ads.model.FileExtraInfo;
import com.tencent.ads.model.SchemeCol;
import com.tencent.ads.model.SelectScene;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataNexusFileApi {
  private ApiClient apiClient;

  public DataNexusFileApi() {
    this(Configuration.getDefaultApiClient());
  }

  public DataNexusFileApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Build call for dataNexusFileAdd
   *
   * @param accountId (required)
   * @param fileName (required)
   * @param fileDesc (required)
   * @param file (required)
   * @param schemaDefine (required)
   * @param scenes (required)
   * @param extraInfo (optional)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call dataNexusFileAddCall(
      Long accountId,
      String fileName,
      String fileDesc,
      File file,
      List<SchemeCol> schemaDefine,
      List<SelectScene> scenes,
      FileExtraInfo extraInfo,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/data_nexus_file/add";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();
    if (accountId != null) localVarFormParams.put("account_id", accountId);
    if (fileName != null) localVarFormParams.put("file_name", fileName);
    if (fileDesc != null) localVarFormParams.put("file_desc", fileDesc);
    if (file != null) localVarFormParams.put("file", file);
    if (schemaDefine != null) localVarFormParams.put("schema_define", schemaDefine);
    if (scenes != null) localVarFormParams.put("scenes", scenes);
    if (extraInfo != null) localVarFormParams.put("extra_info", extraInfo);

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"multipart/form-data"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(
                    com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {"accessToken", "nonce", "timestamp"};
    return apiClient.buildCall(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call dataNexusFileAddValidateBeforeCall(
      Long accountId,
      String fileName,
      String fileDesc,
      File file,
      List<SchemeCol> schemaDefine,
      List<SelectScene> scenes,
      FileExtraInfo extraInfo,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {

    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      throw new ApiException(
          "Missing the required parameter 'accountId' when calling dataNexusFileAdd(Async)");
    }

    // verify the required parameter 'fileName' is set
    if (fileName == null) {
      throw new ApiException(
          "Missing the required parameter 'fileName' when calling dataNexusFileAdd(Async)");
    }

    // verify the required parameter 'fileDesc' is set
    if (fileDesc == null) {
      throw new ApiException(
          "Missing the required parameter 'fileDesc' when calling dataNexusFileAdd(Async)");
    }

    // verify the required parameter 'file' is set
    if (file == null) {
      throw new ApiException(
          "Missing the required parameter 'file' when calling dataNexusFileAdd(Async)");
    }

    // verify the required parameter 'schemaDefine' is set
    if (schemaDefine == null) {
      throw new ApiException(
          "Missing the required parameter 'schemaDefine' when calling dataNexusFileAdd(Async)");
    }

    // verify the required parameter 'scenes' is set
    if (scenes == null) {
      throw new ApiException(
          "Missing the required parameter 'scenes' when calling dataNexusFileAdd(Async)");
    }

    com.squareup.okhttp.Call call =
        dataNexusFileAddCall(
            accountId,
            fileName,
            fileDesc,
            file,
            schemaDefine,
            scenes,
            extraInfo,
            progressListener,
            progressRequestListener);
    return call;
  }

  /**
   * 上传文件
   *
   * @param accountId (required)
   * @param fileName (required)
   * @param fileDesc (required)
   * @param file (required)
   * @param schemaDefine (required)
   * @param scenes (required)
   * @param extraInfo (optional)
   * @return DataNexusFileAddResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public DataNexusFileAddResponse dataNexusFileAdd(
      Long accountId,
      String fileName,
      String fileDesc,
      File file,
      List<SchemeCol> schemaDefine,
      List<SelectScene> scenes,
      FileExtraInfo extraInfo)
      throws ApiException {
    ApiResponse<DataNexusFileAddResponse> resp =
        dataNexusFileAddWithHttpInfo(
            accountId, fileName, fileDesc, file, schemaDefine, scenes, extraInfo);
    return resp.getData();
  }

  /**
   * 上传文件
   *
   * @param accountId (required)
   * @param fileName (required)
   * @param fileDesc (required)
   * @param file (required)
   * @param schemaDefine (required)
   * @param scenes (required)
   * @param extraInfo (optional)
   * @return ApiResponse&lt;DataNexusFileAddResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<DataNexusFileAddResponse> dataNexusFileAddWithHttpInfo(
      Long accountId,
      String fileName,
      String fileDesc,
      File file,
      List<SchemeCol> schemaDefine,
      List<SelectScene> scenes,
      FileExtraInfo extraInfo)
      throws ApiException {
    com.squareup.okhttp.Call call =
        dataNexusFileAddValidateBeforeCall(
            accountId, fileName, fileDesc, file, schemaDefine, scenes, extraInfo, null, null);
    Type localVarReturnType = new TypeToken<DataNexusFileAddResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * 上传文件 (asynchronously)
   *
   * @param accountId (required)
   * @param fileName (required)
   * @param fileDesc (required)
   * @param file (required)
   * @param schemaDefine (required)
   * @param scenes (required)
   * @param extraInfo (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call dataNexusFileAddAsync(
      Long accountId,
      String fileName,
      String fileDesc,
      File file,
      List<SchemeCol> schemaDefine,
      List<SelectScene> scenes,
      FileExtraInfo extraInfo,
      final ApiCallback<DataNexusFileAddResponse> callback)
      throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        dataNexusFileAddValidateBeforeCall(
            accountId,
            fileName,
            fileDesc,
            file,
            schemaDefine,
            scenes,
            extraInfo,
            progressListener,
            progressRequestListener);
    Type localVarReturnType = new TypeToken<DataNexusFileAddResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for dataNexusFileGet
   *
   * @param accountId (required)
   * @param fileId (optional)
   * @param page (optional)
   * @param pageSize (optional)
   * @param fields 返回参数的字段列表 (optional)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call dataNexusFileGetCall(
      Long accountId,
      Long fileId,
      Long page,
      Long pageSize,
      List<String> fields,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/data_nexus_file/get";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    if (accountId != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("account_id", accountId));
    if (fileId != null) localVarQueryParams.addAll(apiClient.parameterToPair("file_id", fileId));
    if (page != null) localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
    if (pageSize != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
    if (fields != null)
      localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "fields", fields));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"text/plain"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(
                    com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {"accessToken", "nonce", "timestamp"};
    return apiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call dataNexusFileGetValidateBeforeCall(
      Long accountId,
      Long fileId,
      Long page,
      Long pageSize,
      List<String> fields,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {

    // verify the required parameter 'accountId' is set
    if (accountId == null) {
      throw new ApiException(
          "Missing the required parameter 'accountId' when calling dataNexusFileGet(Async)");
    }

    com.squareup.okhttp.Call call =
        dataNexusFileGetCall(
            accountId, fileId, page, pageSize, fields, progressListener, progressRequestListener);
    return call;
  }

  /**
   * 文件查看
   *
   * @param accountId (required)
   * @param fileId (optional)
   * @param page (optional)
   * @param pageSize (optional)
   * @param fields 返回参数的字段列表 (optional)
   * @return DataNexusFileGetResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public DataNexusFileGetResponse dataNexusFileGet(
      Long accountId, Long fileId, Long page, Long pageSize, List<String> fields)
      throws ApiException {
    ApiResponse<DataNexusFileGetResponse> resp =
        dataNexusFileGetWithHttpInfo(accountId, fileId, page, pageSize, fields);
    return resp.getData();
  }

  /**
   * 文件查看
   *
   * @param accountId (required)
   * @param fileId (optional)
   * @param page (optional)
   * @param pageSize (optional)
   * @param fields 返回参数的字段列表 (optional)
   * @return ApiResponse&lt;DataNexusFileGetResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<DataNexusFileGetResponse> dataNexusFileGetWithHttpInfo(
      Long accountId, Long fileId, Long page, Long pageSize, List<String> fields)
      throws ApiException {
    com.squareup.okhttp.Call call =
        dataNexusFileGetValidateBeforeCall(accountId, fileId, page, pageSize, fields, null, null);
    Type localVarReturnType = new TypeToken<DataNexusFileGetResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * 文件查看 (asynchronously)
   *
   * @param accountId (required)
   * @param fileId (optional)
   * @param page (optional)
   * @param pageSize (optional)
   * @param fields 返回参数的字段列表 (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call dataNexusFileGetAsync(
      Long accountId,
      Long fileId,
      Long page,
      Long pageSize,
      List<String> fields,
      final ApiCallback<DataNexusFileGetResponse> callback)
      throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        dataNexusFileGetValidateBeforeCall(
            accountId, fileId, page, pageSize, fields, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<DataNexusFileGetResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
}
