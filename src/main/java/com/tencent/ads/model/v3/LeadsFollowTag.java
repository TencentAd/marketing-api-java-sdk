/*
 * Marketing API
 * Marketing API
 *
 * OpenAPI spec version: 3.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.tencent.ads.model.v3;


import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/**
 * 线索状态&lt;br&gt;标准状态取值如下&lt;br&gt;LEADS_FOLLOW_TAG_DEFAULT : 未分配&lt;br&gt;LEADS_FOLLOW_TAG_ASSIGNED
 * : 已分配待跟进&lt;br&gt;LEADS_FOLLOW_TAG_FOLLOWING : 跟进中&lt;br&gt;LEADS_FOLLOW_TAG_VALID :
 * 已转换-潜在客户&lt;br&gt;LEADS_FOLLOW_TAG_VALID_HIGH_INTENTION :
 * 已转换-高意向客户&lt;br&gt;LEADS_FOLLOW_TAG_VALID_CONVERTED :
 * 已转换-已成单&lt;br&gt;LEADS_FOLLOW_TAG_INVALID_REPEAT :
 * 无效-重复&lt;br&gt;LEADS_FOLLOW_TAG_INVALID_NOTSELF :
 * 无效-非本人&lt;br&gt;LEADS_FOLLOW_TAG_INVALID_NOTTOUCH :
 * 无效-未接通&lt;br&gt;LEADS_FOLLOW_TAG_INVALID_NOTINTENTION :
 * 无效-无意向&lt;br&gt;LEADS_FOLLOW_TAG_INVALID_REGION_MISMATCHED :
 * 无效-定向外&lt;br&gt;LEADS_FOLLOW_TAG_INVALID_OTHER : 无效-其他&lt;br&gt;其他枚举值为行业状态
 */
@JsonAdapter(LeadsFollowTag.Adapter.class)
public enum LeadsFollowTag {
  FOLLOW_TAG_DEFAULT("LEADS_FOLLOW_TAG_DEFAULT"),

  FOLLOW_TAG_ASSIGNED("LEADS_FOLLOW_TAG_ASSIGNED"),

  FOLLOW_TAG_FOLLOWING("LEADS_FOLLOW_TAG_FOLLOWING"),

  FOLLOW_TAG_VALID("LEADS_FOLLOW_TAG_VALID"),

  FOLLOW_TAG_VALID_HIGH_INTENTION("LEADS_FOLLOW_TAG_VALID_HIGH_INTENTION"),

  FOLLOW_TAG_VALID_CONVERTED("LEADS_FOLLOW_TAG_VALID_CONVERTED"),

  FOLLOW_TAG_INVALID_REPEAT("LEADS_FOLLOW_TAG_INVALID_REPEAT"),

  FOLLOW_TAG_INVALID_NOTSELF("LEADS_FOLLOW_TAG_INVALID_NOTSELF"),

  FOLLOW_TAG_INVALID_NOTTOUCH("LEADS_FOLLOW_TAG_INVALID_NOTTOUCH"),

  FOLLOW_TAG_INVALID_NOTINTENTION("LEADS_FOLLOW_TAG_INVALID_NOTINTENTION"),

  FOLLOW_TAG_INVALID_REGION_MISMATCHED("LEADS_FOLLOW_TAG_INVALID_REGION_MISMATCHED"),

  FOLLOW_TAG_INVALID_OTHER("LEADS_FOLLOW_TAG_INVALID_OTHER"),

  CONVERT_STATUS_POTENTIAL_CUSTOMER("LEADS_CONVERT_STATUS_POTENTIAL_CUSTOMER"),

  CONVERT_STATUS_VISIT_STORE("LEADS_CONVERT_STATUS_VISIT_STORE"),

  CONVERT_STATUS_TRANS_COMPLETED("LEADS_CONVERT_STATUS_TRANS_COMPLETED"),

  CONVERT_STATUS_LONGTERM_INTENTION("LEADS_CONVERT_STATUS_LONGTERM_INTENTION"),

  CONVERT_STATUS_ADD_WEIXIN("LEADS_CONVERT_STATUS_ADD_WEIXIN"),

  CONVERT_STATUS_HIGH_INTENTION("LEADS_CONVERT_STATUS_HIGH_INTENTION"),

  INEFFECT_REASON_EMPTY("LEADS_INEFFECT_REASON_EMPTY"),

  INEFFECT_REASON_SUSPENDED("LEADS_INEFFECT_REASON_SUSPENDED"),

  INEFFECT_REASON_OFFLINE("LEADS_INEFFECT_REASON_OFFLINE"),

  INEFFECT_REASON_TEL_NOT_CONNECTED("LEADS_INEFFECT_REASON_TEL_NOT_CONNECTED"),

  INEFFECT_REASON_ABUSIVE("LEADS_INEFFECT_REASON_ABUSIVE"),

  INEFFECT_REASON_VICIOUS("LEADS_INEFFECT_REASON_VICIOUS"),

  INEFFECT_REASON_COMPETITOR("LEADS_INEFFECT_REASON_COMPETITOR"),

  INEFFECT_REASON_IDENTITY_MISMATCHED("LEADS_INEFFECT_REASON_IDENTITY_MISMATCHED"),

  INEFFECT_REASON_NO_INTENTION("LEADS_INEFFECT_REASON_NO_INTENTION"),

  INEFFECT_REASON_PRODUCT_MISMATCHED("LEADS_INEFFECT_REASON_PRODUCT_MISMATCHED"),

  INEFFECT_REASON_LONGTERM("LEADS_INEFFECT_REASON_LONGTERM"),

  INEFFECT_REASON_REGION_MISMATCHED("LEADS_INEFFECT_REASON_REGION_MISMATCHED"),

  INEFFECT_REASON_DATA_DUPLICATION("LEADS_INEFFECT_REASON_DATA_DUPLICATION"),

  INEFFECT_REASON_OTHER("LEADS_INEFFECT_REASON_OTHER"),

  INEFFECT_REASON_DATA_DUPLICATION_IN_TENCENT("LEADS_INEFFECT_REASON_DATA_DUPLICATION_IN_TENCENT"),

  CONVERT_STATUS_LOSE_VISIT_STORE("LEADS_CONVERT_STATUS_LOSE_VISIT_STORE"),

  CONVERT_STATUS_LOSE_PURCHASE("LEADS_CONVERT_STATUS_LOSE_PURCHASE"),

  CONVERT_STATUS_LOSE_INTENTION("LEADS_CONVERT_STATUS_LOSE_INTENTION");

  private String value;

  LeadsFollowTag(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static LeadsFollowTag fromValue(String text) {
    for (LeadsFollowTag b : LeadsFollowTag.values()) {
      if (String.valueOf(b.value).equals(text)) {
        return b;
      }
    }
    return null;
  }

  public static class Adapter extends TypeAdapter<LeadsFollowTag> {
    @Override
    public void write(final JsonWriter jsonWriter, final LeadsFollowTag enumeration)
        throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public LeadsFollowTag read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return LeadsFollowTag.fromValue(String.valueOf(value));
    }
  }
}
